 // 1. Display the whiteplane according to the normal and D
        WhitePlane.gameObject.SetActive(ShowWhite);
        if (ShowWhite)
        {
            // Set the normal
            Vector3 n = WhitePlaneNormal.normalized;
            WhitePlane.transform.up = n; // for n dot P + D = 0, this will be -n
            // The plane's position is at the center of the plane, which is at distance D from origin along the normal direction
            WhitePlane.transform.position = WhitePlaneD * n;
        }


// 2. draw the normal of the red quad and its D 
        //    D: value sets the sphere radius (sphere should locate at Quad center)
        RedQuadD.SetActive(ShowRed);
        RedQuadNormal.SetActive(ShowRed);
        RedQuad.gameObject.SetActive(ShowRed);
        if (ShowRed)
        {
            // Normal
            Vector3 n = -RedQuad.forward;  // Unity normalizes this for us
            Vector3 p = RedQuad.localPosition + kNormalSize * n;
            SetLine(RedQuad.localPosition, p, RedQuadNormal);

            // D: show black if D>0, else show white color
            float d = Vector3.Dot(n, RedQuad.localPosition); // assuming the equation is n dot P = D
            RedQuadD.transform.localPosition = RedQuad.localPosition;
            RedQuadD.transform.localScale = new Vector3(d, d, d);
            if (d > 0)  // for n dot P + D = 0, this will be d < 0
                RedQuadD.GetComponent<Renderer>().material.color = Color.black;
            else
                RedQuadD.GetComponent<Renderer>().material.color = Color.white;

        }